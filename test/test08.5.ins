
------For function ----- main

------Basic Block Graph---------
C1 (0): 
------~Final traced LLVM instructions ---------
define i64 @main() {
C1:
%r108 = call i64* @malloc(i64 24)
%r107 = ptrtoint i64* %r108 to i64
%r100 = add i64 %r107, 8
%r109 = sub i64 %r100, 8
%r110 = inttoptr i64 %r109 to i64*
store i64 2, i64* %r110, align 8
%r111 = inttoptr i64 %r100 to i64*
store i64 1, i64* %r111, align 8
%r112 = add i64 %r100, 8
%r113 = inttoptr i64 %r112 to i64*
store i64 2, i64* %r113, align 8
%r114 = call i64* @malloc(i64 16)
%r103 = ptrtoint i64* %r114 to i64
%r115 = inttoptr i64 %r103 to i64*
%r116 = ptrtoint i64* @c1$m to i64
store i64 %r116, i64* %r115, align 8
%r101 = add i64 %r103, 0
%r117 = inttoptr i64 %r101 to i64*
store i64 5, i64* %r117, align 8
%r119 = inttoptr i64 %r101 to i64*
%r118 = load i64, i64* %r119, align 8
%r120 = inttoptr i64 %r118 to i64*
%r121 = add i64 233, 0
%r104 = call i64 %r120(i64 %r101, i64 %r101, i64 %r100, i64 %r121)
call void @putint(i64 %r104)
call void @putch(i64 10)
%r122 = call i64* @malloc(i64 24)
%r105 = ptrtoint i64* %r122 to i64
%r123 = inttoptr i64 %r105 to i64*
%r124 = ptrtoint i64* @d1$m1_m2 to i64
store i64 %r124, i64* %r123, align 8
%r125 = inttoptr i64 %r105 to i64*
%r126 = ptrtoint i64* @d1_m1$m2 to i64
store i64 %r126, i64* %r125, align 8
%r102 = add i64 %r105, 0
%r128 = inttoptr i64 %r102 to i64*
%r127 = load i64, i64* %r128, align 8
%r129 = inttoptr i64 %r127 to i64*
%r106 = call i64 %r129(i64 %r102)
call void @putint(i64 %r106)
call void @putch(i64 10)
ret i64 0
}

------Flow Graph------
[         C1:; d: s: ]  (0): 1 
[%r108 = call i64* @malloc(i64 24); d: 108; s: ]  (1): 2 
[%r107 = ptrtoint i64* %r108 to i64; d: 107; s: 108]  (2): 3 
[%r100 = add i64 %r107, 8; d: 100; s: 107]  (3): 4 
[%r109 = sub i64 %r100, 8; d: 109; s: 100]  (4): 5 
[%r110 = inttoptr i64 %r109 to i64*; d: 110; s: 109]  (5): 6 
[store i64 2, i64* %r110, align 8; d: s: 110]  (6): 7 
[%r111 = inttoptr i64 %r100 to i64*; d: 111; s: 100]  (7): 8 
[store i64 1, i64* %r111, align 8; d: s: 111]  (8): 9 
[%r112 = add i64 %r100, 8; d: 112; s: 100]  (9): 10 
[%r113 = inttoptr i64 %r112 to i64*; d: 113; s: 112]  (10): 11 
[store i64 2, i64* %r113, align 8; d: s: 113]  (11): 12 
[%r114 = call i64* @malloc(i64 16); d: 114; s: ]  (12): 13 
[%r103 = ptrtoint i64* %r114 to i64; d: 103; s: 114]  (13): 14 
[%r115 = inttoptr i64 %r103 to i64*; d: 115; s: 103]  (14): 15 
[%r116 = ptrtoint i64* @c1$m to i64; d: 116; s: ]  (15): 16 
[store i64 %r116, i64* %r115, align 8; d: s: 116, 115]  (16): 17 
[%r101 = add i64 %r103, 0; d: 101; s: 103]  (17): 18 
[%r117 = inttoptr i64 %r101 to i64*; d: 117; s: 101]  (18): 19 
[store i64 5, i64* %r117, align 8; d: s: 117]  (19): 20 
[%r119 = inttoptr i64 %r101 to i64*; d: 119; s: 101]  (20): 21 
[%r118 = load i64, i64* %r119, align 8; d: 118; s: 119]  (21): 22 
[%r120 = inttoptr i64 %r118 to i64*; d: 120; s: 118]  (22): 23 
[%r121 = add i64 233, 0; d: 121; s: ]  (23): 24 
[%r104 = call i64 %r120(i64 %r101, i64 %r101, i64 %r100, i64 %r121); d: 104; s: 120, 101, 101, 100, 121]  (24): 25 
[call void @putint(i64 %r104); d: s: 104]  (25): 26 
[call void @putch(i64 10); d: s: ]  (26): 27 
[%r122 = call i64* @malloc(i64 24); d: 122; s: ]  (27): 28 
[%r105 = ptrtoint i64* %r122 to i64; d: 105; s: 122]  (28): 29 
[%r123 = inttoptr i64 %r105 to i64*; d: 123; s: 105]  (29): 30 
[%r124 = ptrtoint i64* @d1$m1_m2 to i64; d: 124; s: ]  (30): 31 
[store i64 %r124, i64* %r123, align 8; d: s: 124, 123]  (31): 32 
[%r125 = inttoptr i64 %r105 to i64*; d: 125; s: 105]  (32): 33 
[%r126 = ptrtoint i64* @d1_m1$m2 to i64; d: 126; s: ]  (33): 34 
[store i64 %r126, i64* %r125, align 8; d: s: 126, 125]  (34): 35 
[%r102 = add i64 %r105, 0; d: 102; s: 105]  (35): 36 
[%r128 = inttoptr i64 %r102 to i64*; d: 128; s: 102]  (36): 37 
[%r127 = load i64, i64* %r128, align 8; d: 127; s: 128]  (37): 38 
[%r129 = inttoptr i64 %r127 to i64*; d: 129; s: 127]  (38): 39 
[%r106 = call i64 %r129(i64 %r102); d: 106; s: 129, 102]  (39): 40 
[call void @putint(i64 %r106); d: s: 106]  (40): 41 
[call void @putch(i64 10); d: s: ]  (41): 42 
[   ret i64 0; d: s: ]  (42): 

/* ------Liveness Graph------*/
Number of iterations=31
----------------------
 (0): 1 
def=
use=
In=
Out=
----------------------
 (1): 2 
def=108, 
use=
In=
Out=108, 
----------------------
 (2): 3 
def=107, 
use=108, 
In=108, 
Out=107, 
----------------------
 (3): 4 
def=100, 
use=107, 
In=107, 
Out=100, 
----------------------
 (4): 5 
def=109, 
use=100, 
In=100, 
Out=109, 100, 
----------------------
 (5): 6 
def=110, 
use=109, 
In=100, 109, 
Out=110, 100, 
----------------------
 (6): 7 
def=
use=110, 
In=100, 110, 
Out=100, 
----------------------
 (7): 8 
def=111, 
use=100, 
In=100, 
Out=111, 100, 
----------------------
 (8): 9 
def=
use=111, 
In=100, 111, 
Out=100, 
----------------------
 (9): 10 
def=112, 
use=100, 
In=100, 
Out=112, 100, 
----------------------
 (10): 11 
def=113, 
use=112, 
In=100, 112, 
Out=113, 100, 
----------------------
 (11): 12 
def=
use=113, 
In=100, 113, 
Out=100, 
----------------------
 (12): 13 
def=114, 
use=
In=100, 
Out=114, 100, 
----------------------
 (13): 14 
def=103, 
use=114, 
In=100, 114, 
Out=103, 100, 
----------------------
 (14): 15 
def=115, 
use=103, 
In=100, 103, 
Out=103, 100, 115, 
----------------------
 (15): 16 
def=116, 
use=
In=115, 100, 103, 
Out=115, 116, 100, 103, 
----------------------
 (16): 17 
def=
use=116, 115, 
In=103, 100, 116, 115, 
Out=103, 100, 
----------------------
 (17): 18 
def=101, 
use=103, 
In=100, 103, 
Out=101, 100, 
----------------------
 (18): 19 
def=117, 
use=101, 
In=100, 101, 
Out=117, 100, 101, 
----------------------
 (19): 20 
def=
use=117, 
In=101, 100, 117, 
Out=101, 100, 
----------------------
 (20): 21 
def=119, 
use=101, 
In=100, 101, 
Out=119, 101, 100, 
----------------------
 (21): 22 
def=118, 
use=119, 
In=100, 101, 119, 
Out=118, 100, 101, 
----------------------
 (22): 23 
def=120, 
use=118, 
In=101, 100, 118, 
Out=120, 101, 100, 
----------------------
 (23): 24 
def=121, 
use=
In=100, 101, 120, 
Out=121, 100, 101, 120, 
----------------------
 (24): 25 
def=104, 
use=120, 101, 101, 100, 121, 
In=120, 101, 101, 100, 121, 
Out=104, 
----------------------
 (25): 26 
def=
use=104, 
In=104, 
Out=
----------------------
 (26): 27 
def=
use=
In=
Out=
----------------------
 (27): 28 
def=122, 
use=
In=
Out=122, 
----------------------
 (28): 29 
def=105, 
use=122, 
In=122, 
Out=105, 
----------------------
 (29): 30 
def=123, 
use=105, 
In=105, 
Out=105, 123, 
----------------------
 (30): 31 
def=124, 
use=
In=123, 105, 
Out=123, 124, 105, 
----------------------
 (31): 32 
def=
use=124, 123, 
In=105, 124, 123, 
Out=105, 
----------------------
 (32): 33 
def=125, 
use=105, 
In=105, 
Out=105, 125, 
----------------------
 (33): 34 
def=126, 
use=
In=125, 105, 
Out=125, 126, 105, 
----------------------
 (34): 35 
def=
use=126, 125, 
In=105, 126, 125, 
Out=105, 
----------------------
 (35): 36 
def=102, 
use=105, 
In=105, 
Out=102, 
----------------------
 (36): 37 
def=128, 
use=102, 
In=102, 
Out=128, 102, 
----------------------
 (37): 38 
def=127, 
use=128, 
In=102, 128, 
Out=127, 102, 
----------------------
 (38): 39 
def=129, 
use=127, 
In=102, 127, 
Out=102, 129, 
----------------------
 (39): 40 
def=106, 
use=129, 102, 
In=129, 102, 
Out=106, 
----------------------
 (40): 41 
def=
use=106, 
In=106, 
Out=
----------------------
 (41): 42 
def=
use=
In=
Out=
----------------------
 (42): 
def=
use=
In=
Out=

------For function ----- d1_m1$m2

------Basic Block Graph---------
C4 (0): 
------~Final traced LLVM instructions ---------
define i64 @d1_m1$m2(i64 %r99) {
C4:
ret i64 300
}

------Flow Graph------
[         C4:; d: s: ]  (0): 1 
[ ret i64 300; d: s: ]  (1): 

/* ------Liveness Graph------*/
Number of iterations=32
----------------------
 (0): 1 
def=
use=
In=
Out=
----------------------
 (1): 
def=
use=
In=
Out=

------For function ----- d1$m1_m2

------Basic Block Graph---------
C7 (0): 
------~Final traced LLVM instructions ---------
define i64 @d1$m1_m2(i64 %r99) {
C7:
ret i64 200
}

------Flow Graph------
[         C7:; d: s: ]  (0): 1 
[ ret i64 200; d: s: ]  (1): 

/* ------Liveness Graph------*/
Number of iterations=33
----------------------
 (0): 1 
def=
use=
In=
Out=
----------------------
 (1): 
def=
use=
In=
Out=

------For function ----- c1$m

------Basic Block Graph---------
C10 (0): 
------~Final traced LLVM instructions ---------
define i64 @c1$m(i64 %r99, i64 %r100, i64 %r101, i64 %r102) {
C10:
%r163 = inttoptr i64 %r100 to i64*
%r162 = load i64, i64* %r163, align 8
%r165 = add i64 %r101, 8
%r166 = inttoptr i64 %r165 to i64*
%r164 = load i64, i64* %r166, align 8
%r161 = add i64 %r162, %r164
%r160 = add i64 %r161, %r102
ret i64 %r160
}

------Flow Graph------
[        C10:; d: s: ]  (0): 1 
[%r163 = inttoptr i64 %r100 to i64*; d: 163; s: 100]  (1): 2 
[%r162 = load i64, i64* %r163, align 8; d: 162; s: 163]  (2): 3 
[%r165 = add i64 %r101, 8; d: 165; s: 101]  (3): 4 
[%r166 = inttoptr i64 %r165 to i64*; d: 166; s: 165]  (4): 5 
[%r164 = load i64, i64* %r166, align 8; d: 164; s: 166]  (5): 6 
[%r161 = add i64 %r162, %r164; d: 161; s: 162, 164]  (6): 7 
[%r160 = add i64 %r161, %r102; d: 160; s: 161, 102]  (7): 8 
[ret i64 %r160; d: s: 160]  (8): 

/* ------Liveness Graph------*/
Number of iterations=49
----------------------
 (0): 1 
def=
use=
In=100, 101, 102, 
Out=100, 101, 102, 
----------------------
 (1): 2 
def=163, 
use=100, 
In=102, 101, 100, 
Out=163, 102, 101, 
----------------------
 (2): 3 
def=162, 
use=163, 
In=101, 102, 163, 
Out=101, 102, 162, 
----------------------
 (3): 4 
def=165, 
use=101, 
In=162, 102, 101, 
Out=165, 162, 102, 
----------------------
 (4): 5 
def=166, 
use=165, 
In=102, 162, 165, 
Out=166, 102, 162, 
----------------------
 (5): 6 
def=164, 
use=166, 
In=162, 102, 166, 
Out=164, 162, 102, 
----------------------
 (6): 7 
def=161, 
use=162, 164, 
In=102, 162, 164, 
Out=102, 161, 
----------------------
 (7): 8 
def=160, 
use=161, 102, 
In=161, 102, 
Out=160, 
----------------------
 (8): 
def=
use=160, 
In=160, 
Out=
