define i64 @main() {
C10:
%r160 = call i64* @malloc(i64 96)
%r161 = ptrtoint i64* %r160 to i64
%r162 = add i64 %r161, 8
%r163 = sub i64 %r162, 8
%r164 = inttoptr i64 %r163 to i64*
store i64 11, i64* %r164, align 8
%r165 = inttoptr i64 %r162 to i64*
store i64 1, i64* %r165, align 8
%r166 = add i64 %r162, 8
%r167 = inttoptr i64 %r166 to i64*
store i64 9, i64* %r167, align 8
%r168 = add i64 %r162, 16
%r169 = inttoptr i64 %r168 to i64*
store i64 3, i64* %r169, align 8
%r170 = add i64 %r162, 24
%r171 = inttoptr i64 %r170 to i64*
store i64 0, i64* %r171, align 8
%r172 = add i64 %r162, 32
%r173 = inttoptr i64 %r172 to i64*
store i64 7, i64* %r173, align 8
%r174 = add i64 %r162, 40
%r175 = inttoptr i64 %r174 to i64*
store i64 1, i64* %r175, align 8
%r176 = add i64 %r162, 48
%r177 = inttoptr i64 %r176 to i64*
store i64 3, i64* %r177, align 8
%r178 = add i64 %r162, 56
%r179 = inttoptr i64 %r178 to i64*
store i64 0, i64* %r179, align 8
%r180 = add i64 %r162, 64
%r181 = inttoptr i64 %r180 to i64*
store i64 2, i64* %r181, align 8
%r182 = add i64 %r162, 72
%r183 = inttoptr i64 %r182 to i64*
store i64 9, i64* %r183, align 8
%r184 = add i64 %r162, 80
%r185 = inttoptr i64 %r184 to i64*
store i64 6, i64* %r185, align 8
%r186 = add i64 0, 0
%r187 = call i64* @malloc(i64 56)
%r188 = ptrtoint i64* %r187 to i64
%r189 = inttoptr i64 %r188 to i64*
%r190 = ptrtoint i64* @s$pop to i64
store i64 %r190, i64* %r189, align 8
%r191 = inttoptr i64 %r188 to i64*
%r192 = ptrtoint i64* @s$push to i64
store i64 %r192, i64* %r191, align 8
%r193 = inttoptr i64 %r188 to i64*
%r194 = ptrtoint i64* @s$empty to i64
store i64 %r194, i64* %r193, align 8
%r195 = inttoptr i64 %r188 to i64*
%r196 = ptrtoint i64* @s$clear to i64
store i64 %r196, i64* %r195, align 8
%r197 = add i64 %r188, 0
%r198 = inttoptr i64 %r197 to i64*
%r199 = load i64, i64* %r198, align 8
%r200 = inttoptr i64 %r199 to i64*
%r201 = call i64 %r200(i64 %r197)
br label %L3
L3:
%r202 = phi i64 [%r221, %L5], [%r186, %C10]
%r203 = icmp slt i64 %r202, 5
br i1 %r203, label %L5, label %L4
L4:
br label %L6
L6:
%r204 = inttoptr i64 %r197 to i64*
%r205 = load i64, i64* %r204, align 8
%r206 = inttoptr i64 %r205 to i64*
%r207 = call i64 %r206(i64 %r197)
%r208 = icmp eq i64 %r207, 0
br i1 %r208, label %L8, label %L7
L7:
ret i64 0
L5:
%r213 = inttoptr i64 %r197 to i64*
%r214 = load i64, i64* %r213, align 8
%r215 = inttoptr i64 %r214 to i64*
%r216 = mul i64 %r202, 8
%r217 = add i64 %r162, %r216
%r218 = inttoptr i64 %r217 to i64*
%r219 = load i64, i64* %r218, align 8
%r220 = call i64 %r215(i64 %r197, i64 %r219)
%r221 = add i64 %r202, 1
br label %L3
L8:
%r209 = inttoptr i64 %r197 to i64*
%r210 = load i64, i64* %r209, align 8
%r211 = inttoptr i64 %r210 to i64*
%r212 = call i64 %r211(i64 %r197)
call void @putint(i64 %r212)
call void @putch(i64 10)
br label %L6
}

define i64 @s$pop(i64 %r99) {
C13:
%r238 = add i64 %r99, 8
%r239 = inttoptr i64 %r238 to i64*
%r240 = add i64 %r99, 8
%r241 = inttoptr i64 %r240 to i64*
%r242 = load i64, i64* %r241, align 8
%r243 = sub i64 %r242, 1
store i64 %r243, i64* %r239, align 8
%r244 = add i64 %r99, 16
%r245 = inttoptr i64 %r244 to i64*
%r246 = load i64, i64* %r245, align 8
%r247 = add i64 %r99, 8
%r248 = inttoptr i64 %r247 to i64*
%r249 = load i64, i64* %r248, align 8
%r250 = mul i64 %r249, 8
%r251 = add i64 %r246, %r250
%r252 = inttoptr i64 %r251 to i64*
%r253 = load i64, i64* %r252, align 8
ret i64 %r253
}

define i64 @s$push(i64 %r99, i64 %r100) {
C16:
%r269 = add i64 %r99, 16
%r270 = inttoptr i64 %r269 to i64*
%r271 = load i64, i64* %r270, align 8
%r272 = add i64 %r99, 8
%r273 = inttoptr i64 %r272 to i64*
%r274 = load i64, i64* %r273, align 8
%r275 = mul i64 %r274, 8
%r276 = add i64 %r271, %r275
%r277 = inttoptr i64 %r276 to i64*
store i64 %r100, i64* %r277, align 8
%r278 = add i64 %r99, 8
%r279 = inttoptr i64 %r278 to i64*
%r280 = add i64 %r99, 8
%r281 = inttoptr i64 %r280 to i64*
%r282 = load i64, i64* %r281, align 8
%r283 = add i64 %r282, 1
store i64 %r283, i64* %r279, align 8
ret i64 1
}

define i64 @s$empty(i64 %r99) {
C19:
%r290 = inttoptr i64 %r99 to i64*
%r291 = load i64, i64* %r290, align 8
%r292 = add i64 %r99, 8
%r293 = inttoptr i64 %r292 to i64*
%r294 = load i64, i64* %r293, align 8
%r295 = icmp eq i64 %r291, %r294
br i1 %r295, label %L0, label %L1
L1:
ret i64 0
L0:
ret i64 1
}

define i64 @s$clear(i64 %r99) {
C23:
%r303 = inttoptr i64 %r99 to i64*
store i64 0, i64* %r303, align 8
%r304 = add i64 %r99, 8
%r305 = inttoptr i64 %r304 to i64*
store i64 0, i64* %r305, align 8
%r306 = add i64 %r99, 16
%r307 = call i64* @malloc(i64 808)
%r308 = ptrtoint i64* %r307 to i64
%r309 = inttoptr i64 %r308 to i64*
store i64 100, i64* %r309, align 8
%r310 = add i64 %r308, 8
%r311 = inttoptr i64 %r306 to i64*
store i64 %r310, i64* %r311, align 8
ret i64 0
}

declare void @starttime()
declare void @stoptime()
declare i64* @malloc(i64)
declare void @putch(i64)
declare void @putint(i64)
declare void @putfloat(double)
declare i64 @getint()
declare float @getfloat()
declare i64* @getarray(i64)
declare i64 @getch(i64)
declare i64* @getfarray(i64)
declare void @putarray(i64, i64*)
declare void @putfarray(i64, i64*)
