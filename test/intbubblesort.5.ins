
------For function ----- main

------Basic Block Graph---------
C11 (0): 
------~Final traced AS instructions ---------
define i64 @main() {
C11:
%100 = add i64 0, 0
%105 = call i64* @malloc(i64 64)
%104 = ptrtoint i64* %105 to i64
%101 = add i64 %104, 8
%106 = sub i64 %101, -8
%107 = inttoptr i64 %106 to i64*
store i64 7, i64* %107, align 8
%108 = inttoptr i64 %101 to i64*
store i64 6, i64* %108, align 8
%109 = add i64 %101, 8
%110 = inttoptr i64 %109 to i64*
store i64 3, i64* %110, align 8
%111 = add i64 %101, 16
%112 = inttoptr i64 %111 to i64*
store i64 0, i64* %112, align 8
%113 = add i64 %101, 24
%114 = inttoptr i64 %113 to i64*
store i64 5, i64* %114, align 8
%115 = add i64 %101, 32
%116 = inttoptr i64 %115 to i64*
store i64 9, i64* %116, align 8
%117 = add i64 %101, 40
%118 = inttoptr i64 %117 to i64*
store i64 1, i64* %118, align 8
%119 = add i64 %101, 48
%120 = inttoptr i64 %119 to i64*
store i64 2, i64* %120, align 8
%121 = call i64* @malloc(i64 8)
%103 = ptrtoint i64* %121 to i64
%122 = inttoptr i64 %103 to i64*
%123 = ptrtoint i64* @b1$bubbleSort to i64
store i64 %123, i64* %122, align 8
%102 = add i64 %103, 0
%125 = inttoptr i64 %102 to i64*
%124 = load i64, i64* %125, align 8
%126 = inttoptr i64 %124 to i64*
%129 = sub i64 %101, -8
%130 = inttoptr i64 %129 to i64*
%128 = load i64, i64* %130, align 8
%127 = call i64 %126(i64 %102, i64 %101, i64 %128)
L7:
%133 = sub i64 %101, -8
%134 = inttoptr i64 %133 to i64*
%132 = load i64, i64* %134, align 8
%131 = icmp slt i64 %100, %132
br i1 %131, label %L9, label %L8
L8:
call void @putch(i64 10)
ret i64 0
L9:
%137 = mul i64 %100, 8
%136 = add i64 %101, %137
%138 = inttoptr i64 %136 to i64*
%135 = load i64, i64* %138, align 8
call void @putint(i64 %135)
call void @putch(i64 32)
%100 = add i64 %100, 1
br label %L7
C10:
ret i64 -1
}


------For function ----- b1$bubbleSort

------Basic Block Graph---------
C13 (0): 
------~Final traced AS instructions ---------
define i64 @b1$bubbleSort(i64 %99, i64 %100, i64 %101) {
C13:
%102 = add i64 0, 0
%155 = icmp sle i64 %101, 1
br i1 %155, label %L0, label %L1
L1:
L2:
%157 = sub i64 %101, 1
%156 = icmp slt i64 %102, %157
br i1 %156, label %L6, label %L3
L3:
%159 = inttoptr i64 %99 to i64*
%158 = load i64, i64* %159, align 8
%160 = inttoptr i64 %158 to i64*
%161 = sub i64 %101, 1
%104 = call i64 %160(i64 %99, i64 %100, i64 %161)
ret i64 %104
L0:
ret i64 0
L6:
%165 = mul i64 %102, 8
%164 = add i64 %100, %165
%166 = inttoptr i64 %164 to i64*
%163 = load i64, i64* %166, align 8
%170 = add i64 %102, 1
%169 = mul i64 %170, 8
%168 = add i64 %100, %169
%171 = inttoptr i64 %168 to i64*
%167 = load i64, i64* %171, align 8
%162 = icmp sgt i64 %163, %167
br i1 %162, label %L4, label %L5
L5:
%102 = add i64 %102, 1
br label %L2
L4:
%173 = mul i64 %102, 8
%172 = add i64 %100, %173
%174 = inttoptr i64 %172 to i64*
%103 = load i64, i64* %174, align 8
%176 = mul i64 %102, 8
%175 = add i64 %100, %176
%177 = inttoptr i64 %175 to i64*
%181 = add i64 %102, 1
%180 = mul i64 %181, 8
%179 = add i64 %100, %180
%182 = inttoptr i64 %179 to i64*
%178 = load i64, i64* %182, align 8
store i64 %178, i64* %177, align 8
%185 = add i64 %102, 1
%184 = mul i64 %185, 8
%183 = add i64 %100, %184
%186 = inttoptr i64 %183 to i64*
store i64 %103, i64* %186, align 8
br label %L5
C12:
ret i64 -1
}

