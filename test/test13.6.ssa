define i64 @main() {
C10:
%r163 = call i64* @malloc(i64 80)
%r164 = ptrtoint i64* %r163 to i64
%r165 = add i64 %r164, 8
%r166 = sub i64 %r165, 8
%r167 = inttoptr i64 %r166 to i64*
store i64 9, i64* %r167, align 8
%r168 = inttoptr i64 %r165 to i64*
store i64 0, i64* %r168, align 8
%r169 = add i64 %r165, 8
%r170 = inttoptr i64 %r169 to i64*
store i64 0, i64* %r170, align 8
%r171 = add i64 %r165, 16
%r172 = inttoptr i64 %r171 to i64*
store i64 1, i64* %r172, align 8
%r173 = add i64 %r165, 24
%r174 = inttoptr i64 %r173 to i64*
store i64 1, i64* %r174, align 8
%r175 = add i64 %r165, 32
%r176 = inttoptr i64 %r175 to i64*
store i64 2, i64* %r176, align 8
%r177 = add i64 %r165, 40
%r178 = inttoptr i64 %r177 to i64*
store i64 2, i64* %r178, align 8
%r179 = add i64 %r165, 48
%r180 = inttoptr i64 %r179 to i64*
store i64 5, i64* %r180, align 8
%r181 = add i64 %r165, 56
%r182 = inttoptr i64 %r181 to i64*
store i64 5, i64* %r182, align 8
%r183 = add i64 %r165, 64
%r184 = inttoptr i64 %r183 to i64*
store i64 3, i64* %r184, align 8
%r185 = add i64 7, 0
%r186 = add i64 8, 0
%r187 = add i64 1, 0
%r188 = sub i64 %r165, 8
%r189 = inttoptr i64 %r188 to i64*
%r190 = load i64, i64* %r189, align 8
%r191 = call i64* @malloc(i64 168)
%r192 = ptrtoint i64* %r191 to i64
%r193 = inttoptr i64 %r192 to i64*
store i64 20, i64* %r193, align 8
%r194 = add i64 %r192, 8
%r195 = add i64 %r194, 0
%r196 = add i64 %r195, 0
%r197 = inttoptr i64 %r196 to i64*
store i64 0, i64* %r197, align 8
br label %L0
L0:
%r198 = phi i64 [%r234, %L2], [%r187, %C10]
%r199 = icmp slt i64 %r198, %r190
br i1 %r199, label %L2, label %L1
L1:
br label %L3
L3:
%r200 = phi i64 [%r216, %L7], [%r185, %L1]
%r201 = phi i64 [%r217, %L7], [%r186, %L1]
%r202 = icmp ne i64 %r200, %r201
br i1 %r202, label %L8, label %L4
L4:
call void @putint(i64 %r200)
call void @putch(i64 10)
ret i64 0
L2:
%r222 = mul i64 %r198, 8
%r223 = add i64 %r195, %r222
%r224 = inttoptr i64 %r223 to i64*
%r225 = mul i64 %r198, 8
%r226 = add i64 %r165, %r225
%r227 = inttoptr i64 %r226 to i64*
%r228 = load i64, i64* %r227, align 8
%r229 = mul i64 %r228, 8
%r230 = add i64 %r195, %r229
%r231 = inttoptr i64 %r230 to i64*
%r232 = load i64, i64* %r231, align 8
%r233 = add i64 %r232, 1
store i64 %r233, i64* %r224, align 8
%r234 = add i64 %r198, 1
br label %L0
L8:
%r203 = mul i64 %r200, 8
%r204 = add i64 %r195, %r203
%r205 = inttoptr i64 %r204 to i64*
%r206 = load i64, i64* %r205, align 8
%r207 = mul i64 %r201, 8
%r208 = add i64 %r195, %r207
%r209 = inttoptr i64 %r208 to i64*
%r210 = load i64, i64* %r209, align 8
%r211 = icmp slt i64 %r206, %r210
br i1 %r211, label %L5, label %L6
L6:
%r212 = mul i64 %r200, 8
%r213 = add i64 %r165, %r212
%r214 = inttoptr i64 %r213 to i64*
%r215 = load i64, i64* %r214, align 8
br label %L7
L7:
%r216 = phi i64 [%r200, %L5], [%r215, %L6]
%r217 = phi i64 [%r221, %L5], [%r201, %L6]
br label %L3
L5:
%r218 = mul i64 %r201, 8
%r219 = add i64 %r165, %r218
%r220 = inttoptr i64 %r219 to i64*
%r221 = load i64, i64* %r220, align 8
br label %L7
}

declare void @starttime()
declare void @stoptime()
declare i64* @malloc(i64)
declare void @putch(i64)
declare void @putint(i64)
declare void @putfloat(double)
declare i64 @getint()
declare float @getfloat()
declare i64* @getarray(i64)
declare i64 @getch(i64)
declare i64* @getfarray(i64)
declare void @putarray(i64, i64*)
declare void @putfarray(i64, i64*)
