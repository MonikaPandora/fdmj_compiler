
------For function ----- main

------Basic Block Graph---------
C10 (0): 
------~Final traced AS instructions ---------
define i64 @main() {
C10:
%107 = call i64* @malloc(i64 96)
%106 = ptrtoint i64* %107 to i64
%100 = add i64 %106, 8
%108 = sub i64 %100, -8
%109 = inttoptr i64 %108 to i64*
store i64 11, i64* %109, align 8
%110 = inttoptr i64 %100 to i64*
store i64 1, i64* %110, align 8
%111 = add i64 %100, 8
%112 = inttoptr i64 %111 to i64*
store i64 9, i64* %112, align 8
%113 = add i64 %100, 16
%114 = inttoptr i64 %113 to i64*
store i64 3, i64* %114, align 8
%115 = add i64 %100, 24
%116 = inttoptr i64 %115 to i64*
store i64 0, i64* %116, align 8
%117 = add i64 %100, 32
%118 = inttoptr i64 %117 to i64*
store i64 7, i64* %118, align 8
%119 = add i64 %100, 40
%120 = inttoptr i64 %119 to i64*
store i64 1, i64* %120, align 8
%121 = add i64 %100, 48
%122 = inttoptr i64 %121 to i64*
store i64 3, i64* %122, align 8
%123 = add i64 %100, 56
%124 = inttoptr i64 %123 to i64*
store i64 0, i64* %124, align 8
%125 = add i64 %100, 64
%126 = inttoptr i64 %125 to i64*
store i64 2, i64* %126, align 8
%127 = add i64 %100, 72
%128 = inttoptr i64 %127 to i64*
store i64 9, i64* %128, align 8
%129 = add i64 %100, 80
%130 = inttoptr i64 %129 to i64*
store i64 6, i64* %130, align 8
%101 = add i64 0, 0
%131 = call i64* @malloc(i64 56)
%103 = ptrtoint i64* %131 to i64
%132 = inttoptr i64 %103 to i64*
%133 = ptrtoint i64* @s$pop to i64
store i64 %133, i64* %132, align 8
%134 = inttoptr i64 %103 to i64*
%135 = ptrtoint i64* @s$push to i64
store i64 %135, i64* %134, align 8
%136 = inttoptr i64 %103 to i64*
%137 = ptrtoint i64* @s$empty to i64
store i64 %137, i64* %136, align 8
%138 = inttoptr i64 %103 to i64*
%139 = ptrtoint i64* @s$clear to i64
store i64 %139, i64* %138, align 8
%102 = add i64 %103, 0
%140 = inttoptr i64 %102 to i64*
%141 = call i64 %140(i64 %102)
L3:
%142 = icmp slt i64 %101, 5
br i1 %142, label %L5, label %L4
L4:
L6:
%143 = inttoptr i64 %102 to i64*
%104 = call i64 %143(i64 %102)
%144 = icmp eq i64 %104, 0
br i1 %144, label %L8, label %L7
L7:
ret i64 0
L5:
%145 = inttoptr i64 %102 to i64*
%149 = mul i64 %101, 8
%148 = add i64 %100, %149
%150 = inttoptr i64 %148 to i64*
%147 = load i64, i64* %150, align 8
%146 = call i64 %145(i64 %102, i64 %147)
%101 = add i64 %101, 1
br label %L3
L8:
%151 = inttoptr i64 %102 to i64*
%105 = call i64 %151(i64 %102)
call void @putint(i64 %105)
call void @putch(i64 10)
br label %L6
C9:
ret i64 -1
}


------For function ----- s$pop

------Basic Block Graph---------
C12 (0): 
------~Final traced AS instructions ---------
define i64 @s$pop(i64 %99) {
C12:
%195 = add i64 %99, 8
%196 = inttoptr i64 %195 to i64*
%199 = add i64 %99, 8
%200 = inttoptr i64 %199 to i64*
%198 = load i64, i64* %200, align 8
%197 = sub i64 %198, 1
store i64 %197, i64* %196, align 8
%204 = add i64 %99, 16
%205 = inttoptr i64 %204 to i64*
%203 = load i64, i64* %205, align 8
%208 = add i64 %99, 8
%209 = inttoptr i64 %208 to i64*
%207 = load i64, i64* %209, align 8
%206 = mul i64 %207, 8
%202 = add i64 %203, %206
%210 = inttoptr i64 %202 to i64*
%201 = load i64, i64* %210, align 8
ret i64 %201
C11:
ret i64 -1
}


------For function ----- s$push

------Basic Block Graph---------
C14 (0): 
------~Final traced AS instructions ---------
define i64 @s$push(i64 %99, i64 %100) {
C14:
%213 = add i64 %99, 16
%214 = inttoptr i64 %213 to i64*
%212 = load i64, i64* %214, align 8
%217 = add i64 %99, 8
%218 = inttoptr i64 %217 to i64*
%216 = load i64, i64* %218, align 8
%215 = mul i64 %216, 8
%211 = add i64 %212, %215
%219 = inttoptr i64 %211 to i64*
store i64 %100, i64* %219, align 8
%220 = add i64 %99, 8
%221 = inttoptr i64 %220 to i64*
%224 = add i64 %99, 8
%225 = inttoptr i64 %224 to i64*
%223 = load i64, i64* %225, align 8
%222 = add i64 %223, 1
store i64 %222, i64* %221, align 8
ret i64 1
C13:
ret i64 -1
}


------For function ----- s$empty

------Basic Block Graph---------
C16 (0): 
------~Final traced AS instructions ---------
define i64 @s$empty(i64 %99) {
C16:
%228 = inttoptr i64 %99 to i64*
%227 = load i64, i64* %228, align 8
%230 = add i64 %99, 8
%231 = inttoptr i64 %230 to i64*
%229 = load i64, i64* %231, align 8
%226 = icmp eq i64 %227, %229
br i1 %226, label %L0, label %L1
L1:
ret i64 0
L0:
ret i64 1
C17:
L2:
br label %C15
C15:
ret i64 -1
}


------For function ----- s$clear

------Basic Block Graph---------
C19 (0): 
------~Final traced AS instructions ---------
define i64 @s$clear(i64 %99) {
C19:
%233 = inttoptr i64 %99 to i64*
store i64 0, i64* %233, align 8
%234 = add i64 %99, 8
%235 = inttoptr i64 %234 to i64*
store i64 0, i64* %235, align 8
%232 = add i64 %99, 16
%236 = call i64* @malloc(i64 808)
%100 = ptrtoint i64* %236 to i64
%237 = inttoptr i64 %100 to i64*
store i64 100, i64* %237, align 8
%100 = add i64 %100, 8
%238 = inttoptr i64 %232 to i64*
store i64 %100, i64* %238, align 8
ret i64 0
C18:
ret i64 -1
}

