
------For function ----- main

------Basic Block Graph---------
C10 (0): 
------~Final traced AS instructions ---------
define i64 @main() {
C10:
%107 = call i64* @malloc(i64 96)
%106 = ptrtoint i64* %107 to i64
%100 = add i64 %106, 8
%108 = sub i64 %100, -8
%109 = inttoptr i64 %108 to i64*
store i64 11, i64* %109, align 8
%110 = inttoptr i64 %100 to i64*
store i64 1, i64* %110, align 8
%111 = add i64 %100, 8
%112 = inttoptr i64 %111 to i64*
store i64 9, i64* %112, align 8
%113 = add i64 %100, 16
%114 = inttoptr i64 %113 to i64*
store i64 3, i64* %114, align 8
%115 = add i64 %100, 24
%116 = inttoptr i64 %115 to i64*
store i64 0, i64* %116, align 8
%117 = add i64 %100, 32
%118 = inttoptr i64 %117 to i64*
store i64 7, i64* %118, align 8
%119 = add i64 %100, 40
%120 = inttoptr i64 %119 to i64*
store i64 1, i64* %120, align 8
%121 = add i64 %100, 48
%122 = inttoptr i64 %121 to i64*
store i64 3, i64* %122, align 8
%123 = add i64 %100, 56
%124 = inttoptr i64 %123 to i64*
store i64 0, i64* %124, align 8
%125 = add i64 %100, 64
%126 = inttoptr i64 %125 to i64*
store i64 2, i64* %126, align 8
%127 = add i64 %100, 72
%128 = inttoptr i64 %127 to i64*
store i64 9, i64* %128, align 8
%129 = add i64 %100, 80
%130 = inttoptr i64 %129 to i64*
store i64 6, i64* %130, align 8
%101 = add i64 0, 0
%131 = call i64* @malloc(i64 56)
%103 = ptrtoint i64* %131 to i64
%132 = inttoptr i64 %103 to i64*
%133 = ptrtoint i64* @s$pop to i64
store i64 %133, i64* %132, align 8
%134 = inttoptr i64 %103 to i64*
%135 = ptrtoint i64* @s$push to i64
store i64 %135, i64* %134, align 8
%136 = inttoptr i64 %103 to i64*
%137 = ptrtoint i64* @s$empty to i64
store i64 %137, i64* %136, align 8
%138 = inttoptr i64 %103 to i64*
%139 = ptrtoint i64* @s$clear to i64
store i64 %139, i64* %138, align 8
%102 = add i64 %103, 0
%141 = inttoptr i64 %102 to i64*
%140 = load i64, i64* %141, align 8
%142 = inttoptr i64 %140 to i64*
%143 = call i64 %142(i64 %102)
L3:
%144 = icmp slt i64 %101, 5
br i1 %144, label %L5, label %L4
L4:
L6:
%146 = inttoptr i64 %102 to i64*
%145 = load i64, i64* %146, align 8
%147 = inttoptr i64 %145 to i64*
%104 = call i64 %147(i64 %102)
%148 = icmp eq i64 %104, 0
br i1 %148, label %L8, label %L7
L7:
ret i64 0
L5:
%150 = inttoptr i64 %102 to i64*
%149 = load i64, i64* %150, align 8
%151 = inttoptr i64 %149 to i64*
%155 = mul i64 %101, 8
%154 = add i64 %100, %155
%156 = inttoptr i64 %154 to i64*
%153 = load i64, i64* %156, align 8
%152 = call i64 %151(i64 %102, i64 %153)
%101 = add i64 %101, 1
br label %L3
L8:
%158 = inttoptr i64 %102 to i64*
%157 = load i64, i64* %158, align 8
%159 = inttoptr i64 %157 to i64*
%105 = call i64 %159(i64 %102)
call void @putint(i64 %105)
call void @putch(i64 10)
br label %L6
C9:
ret i64 -1
}


------For function ----- s$pop

------Basic Block Graph---------
C12 (0): 
------~Final traced AS instructions ---------
define i64 @s$pop(i64 %99) {
C12:
%231 = add i64 %99, 8
%232 = inttoptr i64 %231 to i64*
%235 = add i64 %99, 8
%236 = inttoptr i64 %235 to i64*
%234 = load i64, i64* %236, align 8
%233 = sub i64 %234, 1
store i64 %233, i64* %232, align 8
%240 = add i64 %99, 16
%241 = inttoptr i64 %240 to i64*
%239 = load i64, i64* %241, align 8
%244 = add i64 %99, 8
%245 = inttoptr i64 %244 to i64*
%243 = load i64, i64* %245, align 8
%242 = mul i64 %243, 8
%238 = add i64 %239, %242
%246 = inttoptr i64 %238 to i64*
%237 = load i64, i64* %246, align 8
ret i64 %237
C11:
ret i64 -1
}


------For function ----- s$push

------Basic Block Graph---------
C14 (0): 
------~Final traced AS instructions ---------
define i64 @s$push(i64 %99, i64 %100) {
C14:
%249 = add i64 %99, 16
%250 = inttoptr i64 %249 to i64*
%248 = load i64, i64* %250, align 8
%253 = add i64 %99, 8
%254 = inttoptr i64 %253 to i64*
%252 = load i64, i64* %254, align 8
%251 = mul i64 %252, 8
%247 = add i64 %248, %251
%255 = inttoptr i64 %247 to i64*
store i64 %100, i64* %255, align 8
%256 = add i64 %99, 8
%257 = inttoptr i64 %256 to i64*
%260 = add i64 %99, 8
%261 = inttoptr i64 %260 to i64*
%259 = load i64, i64* %261, align 8
%258 = add i64 %259, 1
store i64 %258, i64* %257, align 8
ret i64 1
C13:
ret i64 -1
}


------For function ----- s$empty

------Basic Block Graph---------
C16 (0): 
------~Final traced AS instructions ---------
define i64 @s$empty(i64 %99) {
C16:
%264 = inttoptr i64 %99 to i64*
%263 = load i64, i64* %264, align 8
%266 = add i64 %99, 8
%267 = inttoptr i64 %266 to i64*
%265 = load i64, i64* %267, align 8
%262 = icmp eq i64 %263, %265
br i1 %262, label %L0, label %L1
L1:
ret i64 0
L0:
ret i64 1
C17:
L2:
br label %C15
C15:
ret i64 -1
}


------For function ----- s$clear

------Basic Block Graph---------
C19 (0): 
------~Final traced AS instructions ---------
define i64 @s$clear(i64 %99) {
C19:
%269 = inttoptr i64 %99 to i64*
store i64 0, i64* %269, align 8
%270 = add i64 %99, 8
%271 = inttoptr i64 %270 to i64*
store i64 0, i64* %271, align 8
%268 = add i64 %99, 16
%272 = call i64* @malloc(i64 808)
%100 = ptrtoint i64* %272 to i64
%273 = inttoptr i64 %100 to i64*
store i64 100, i64* %273, align 8
%100 = add i64 %100, 8
%274 = inttoptr i64 %268 to i64*
store i64 %100, i64* %274, align 8
ret i64 0
C18:
ret i64 -1
}

