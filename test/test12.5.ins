
------For function ----- main

------Basic Block Graph---------
C10 (0): 1 
L3 (1): 2 5 
L4 (2): 3 
L6 (3): 4 6 
L7 (4): 
L5 (5): 1 
L8 (6): 3 
------~Final traced LLVM instructions ---------
define i64 @main() {
C10:
%r107 = call i64* @malloc(i64 96)
%r106 = ptrtoint i64* %r107 to i64
%r100 = add i64 %r106, 8
%r108 = sub i64 %r100, 8
%r109 = inttoptr i64 %r108 to i64*
store i64 11, i64* %r109, align 8
%r110 = inttoptr i64 %r100 to i64*
store i64 1, i64* %r110, align 8
%r111 = add i64 %r100, 8
%r112 = inttoptr i64 %r111 to i64*
store i64 9, i64* %r112, align 8
%r113 = add i64 %r100, 16
%r114 = inttoptr i64 %r113 to i64*
store i64 3, i64* %r114, align 8
%r115 = add i64 %r100, 24
%r116 = inttoptr i64 %r115 to i64*
store i64 0, i64* %r116, align 8
%r117 = add i64 %r100, 32
%r118 = inttoptr i64 %r117 to i64*
store i64 7, i64* %r118, align 8
%r119 = add i64 %r100, 40
%r120 = inttoptr i64 %r119 to i64*
store i64 1, i64* %r120, align 8
%r121 = add i64 %r100, 48
%r122 = inttoptr i64 %r121 to i64*
store i64 3, i64* %r122, align 8
%r123 = add i64 %r100, 56
%r124 = inttoptr i64 %r123 to i64*
store i64 0, i64* %r124, align 8
%r125 = add i64 %r100, 64
%r126 = inttoptr i64 %r125 to i64*
store i64 2, i64* %r126, align 8
%r127 = add i64 %r100, 72
%r128 = inttoptr i64 %r127 to i64*
store i64 9, i64* %r128, align 8
%r129 = add i64 %r100, 80
%r130 = inttoptr i64 %r129 to i64*
store i64 6, i64* %r130, align 8
%r101 = add i64 0, 0
%r131 = call i64* @malloc(i64 56)
%r103 = ptrtoint i64* %r131 to i64
%r132 = inttoptr i64 %r103 to i64*
%r133 = ptrtoint i64* @s$pop to i64
store i64 %r133, i64* %r132, align 8
%r134 = inttoptr i64 %r103 to i64*
%r135 = ptrtoint i64* @s$push to i64
store i64 %r135, i64* %r134, align 8
%r136 = inttoptr i64 %r103 to i64*
%r137 = ptrtoint i64* @s$empty to i64
store i64 %r137, i64* %r136, align 8
%r138 = inttoptr i64 %r103 to i64*
%r139 = ptrtoint i64* @s$clear to i64
store i64 %r139, i64* %r138, align 8
%r102 = add i64 %r103, 0
%r141 = inttoptr i64 %r102 to i64*
%r140 = load i64, i64* %r141, align 8
%r142 = inttoptr i64 %r140 to i64*
%r143 = call i64 %r142(i64 %r102)
br label %L3
L3:
%r144 = icmp slt i64 %r101, 5
br i1 %r144, label %L5, label %L4
L4:
br label %L6
L6:
%r146 = inttoptr i64 %r102 to i64*
%r145 = load i64, i64* %r146, align 8
%r147 = inttoptr i64 %r145 to i64*
%r104 = call i64 %r147(i64 %r102)
%r148 = icmp eq i64 %r104, 0
br i1 %r148, label %L8, label %L7
L7:
ret i64 0
L5:
%r150 = inttoptr i64 %r102 to i64*
%r149 = load i64, i64* %r150, align 8
%r151 = inttoptr i64 %r149 to i64*
%r155 = mul i64 %r101, 8
%r154 = add i64 %r100, %r155
%r156 = inttoptr i64 %r154 to i64*
%r153 = load i64, i64* %r156, align 8
%r152 = call i64 %r151(i64 %r102, i64 %r153)
%r101 = add i64 %r101, 1
br label %L3
L8:
%r158 = inttoptr i64 %r102 to i64*
%r157 = load i64, i64* %r158, align 8
%r159 = inttoptr i64 %r157 to i64*
%r105 = call i64 %r159(i64 %r102)
call void @putint(i64 %r105)
call void @putch(i64 10)
br label %L6
}

------Flow Graph------
[        C10:; d: s: ]  (0): 1 
[%r107 = call i64* @malloc(i64 96); d: 107; s: ]  (1): 2 
[%r106 = ptrtoint i64* %r107 to i64; d: 106; s: 107]  (2): 3 
[%r100 = add i64 %r106, 8; d: 100; s: 106]  (3): 4 
[%r108 = sub i64 %r100, 8; d: 108; s: 100]  (4): 5 
[%r109 = inttoptr i64 %r108 to i64*; d: 109; s: 108]  (5): 6 
[store i64 11, i64* %r109, align 8; d: s: 109]  (6): 7 
[%r110 = inttoptr i64 %r100 to i64*; d: 110; s: 100]  (7): 8 
[store i64 1, i64* %r110, align 8; d: s: 110]  (8): 9 
[%r111 = add i64 %r100, 8; d: 111; s: 100]  (9): 10 
[%r112 = inttoptr i64 %r111 to i64*; d: 112; s: 111]  (10): 11 
[store i64 9, i64* %r112, align 8; d: s: 112]  (11): 12 
[%r113 = add i64 %r100, 16; d: 113; s: 100]  (12): 13 
[%r114 = inttoptr i64 %r113 to i64*; d: 114; s: 113]  (13): 14 
[store i64 3, i64* %r114, align 8; d: s: 114]  (14): 15 
[%r115 = add i64 %r100, 24; d: 115; s: 100]  (15): 16 
[%r116 = inttoptr i64 %r115 to i64*; d: 116; s: 115]  (16): 17 
[store i64 0, i64* %r116, align 8; d: s: 116]  (17): 18 
[%r117 = add i64 %r100, 32; d: 117; s: 100]  (18): 19 
[%r118 = inttoptr i64 %r117 to i64*; d: 118; s: 117]  (19): 20 
[store i64 7, i64* %r118, align 8; d: s: 118]  (20): 21 
[%r119 = add i64 %r100, 40; d: 119; s: 100]  (21): 22 
[%r120 = inttoptr i64 %r119 to i64*; d: 120; s: 119]  (22): 23 
[store i64 1, i64* %r120, align 8; d: s: 120]  (23): 24 
[%r121 = add i64 %r100, 48; d: 121; s: 100]  (24): 25 
[%r122 = inttoptr i64 %r121 to i64*; d: 122; s: 121]  (25): 26 
[store i64 3, i64* %r122, align 8; d: s: 122]  (26): 27 
[%r123 = add i64 %r100, 56; d: 123; s: 100]  (27): 28 
[%r124 = inttoptr i64 %r123 to i64*; d: 124; s: 123]  (28): 29 
[store i64 0, i64* %r124, align 8; d: s: 124]  (29): 30 
[%r125 = add i64 %r100, 64; d: 125; s: 100]  (30): 31 
[%r126 = inttoptr i64 %r125 to i64*; d: 126; s: 125]  (31): 32 
[store i64 2, i64* %r126, align 8; d: s: 126]  (32): 33 
[%r127 = add i64 %r100, 72; d: 127; s: 100]  (33): 34 
[%r128 = inttoptr i64 %r127 to i64*; d: 128; s: 127]  (34): 35 
[store i64 9, i64* %r128, align 8; d: s: 128]  (35): 36 
[%r129 = add i64 %r100, 80; d: 129; s: 100]  (36): 37 
[%r130 = inttoptr i64 %r129 to i64*; d: 130; s: 129]  (37): 38 
[store i64 6, i64* %r130, align 8; d: s: 130]  (38): 39 
[%r101 = add i64 0, 0; d: 101; s: ]  (39): 40 
[%r131 = call i64* @malloc(i64 56); d: 131; s: ]  (40): 41 
[%r103 = ptrtoint i64* %r131 to i64; d: 103; s: 131]  (41): 42 
[%r132 = inttoptr i64 %r103 to i64*; d: 132; s: 103]  (42): 43 
[%r133 = ptrtoint i64* @s$pop to i64; d: 133; s: ]  (43): 44 
[store i64 %r133, i64* %r132, align 8; d: s: 133, 132]  (44): 45 
[%r134 = inttoptr i64 %r103 to i64*; d: 134; s: 103]  (45): 46 
[%r135 = ptrtoint i64* @s$push to i64; d: 135; s: ]  (46): 47 
[store i64 %r135, i64* %r134, align 8; d: s: 135, 134]  (47): 48 
[%r136 = inttoptr i64 %r103 to i64*; d: 136; s: 103]  (48): 49 
[%r137 = ptrtoint i64* @s$empty to i64; d: 137; s: ]  (49): 50 
[store i64 %r137, i64* %r136, align 8; d: s: 137, 136]  (50): 51 
[%r138 = inttoptr i64 %r103 to i64*; d: 138; s: 103]  (51): 52 
[%r139 = ptrtoint i64* @s$clear to i64; d: 139; s: ]  (52): 53 
[store i64 %r139, i64* %r138, align 8; d: s: 139, 138]  (53): 54 
[%r102 = add i64 %r103, 0; d: 102; s: 103]  (54): 55 
[%r141 = inttoptr i64 %r102 to i64*; d: 141; s: 102]  (55): 56 
[%r140 = load i64, i64* %r141, align 8; d: 140; s: 141]  (56): 57 
[%r142 = inttoptr i64 %r140 to i64*; d: 142; s: 140]  (57): 58 
[%r143 = call i64 %r142(i64 %r102); d: 143; s: 142, 102]  (58): 59 
[br label %L3; d: s: ]  (59): 60 
[         L3:; d: s: ]  (60): 61 
[%r144 = icmp slt i64 %r101, 5; d: 144; s: 101]  (61): 62 
[br i1 %r144, label %L5, label %L4; d: s: 144]  (62): 63 74 
[         L4:; d: s: ]  (63): 64 
[br label %L6; d: s: ]  (64): 65 
[         L6:; d: s: ]  (65): 66 
[%r146 = inttoptr i64 %r102 to i64*; d: 146; s: 102]  (66): 67 
[%r145 = load i64, i64* %r146, align 8; d: 145; s: 146]  (67): 68 
[%r147 = inttoptr i64 %r145 to i64*; d: 147; s: 145]  (68): 69 
[%r104 = call i64 %r147(i64 %r102); d: 104; s: 147, 102]  (69): 70 
[%r148 = icmp eq i64 %r104, 0; d: 148; s: 104]  (70): 71 
[br i1 %r148, label %L8, label %L7; d: s: 148]  (71): 72 85 
[         L7:; d: s: ]  (72): 73 
[   ret i64 0; d: s: ]  (73): 74 
[         L5:; d: s: ]  (74): 75 
[%r150 = inttoptr i64 %r102 to i64*; d: 150; s: 102]  (75): 76 
[%r149 = load i64, i64* %r150, align 8; d: 149; s: 150]  (76): 77 
[%r151 = inttoptr i64 %r149 to i64*; d: 151; s: 149]  (77): 78 
[%r155 = mul i64 %r101, 8; d: 155; s: 101]  (78): 79 
[%r154 = add i64 %r100, %r155; d: 154; s: 100, 155]  (79): 80 
[%r156 = inttoptr i64 %r154 to i64*; d: 156; s: 154]  (80): 81 
[%r153 = load i64, i64* %r156, align 8; d: 153; s: 156]  (81): 82 
[%r152 = call i64 %r151(i64 %r102, i64 %r153); d: 152; s: 151, 102, 153]  (82): 83 
[%r101 = add i64 %r101, 1; d: 101; s: 101]  (83): 84 
[br label %L3; d: s: ]  (84): 60 
[         L8:; d: s: ]  (85): 86 
[%r158 = inttoptr i64 %r102 to i64*; d: 158; s: 102]  (86): 87 
[%r157 = load i64, i64* %r158, align 8; d: 157; s: 158]  (87): 88 
[%r159 = inttoptr i64 %r157 to i64*; d: 159; s: 157]  (88): 89 
[%r105 = call i64 %r159(i64 %r102); d: 105; s: 159, 102]  (89): 90 
[call void @putint(i64 %r105); d: s: 105]  (90): 91 
[call void @putch(i64 10); d: s: ]  (91): 92 
[br label %L6; d: s: ]  (92): 65 

/* ------Liveness Graph------*/
Number of iterations=65
----------------------
 (0): 1 
def=
use=
In=
Out=
----------------------
 (1): 2 
def=107, 
use=
In=
Out=107, 
----------------------
 (2): 3 
def=106, 
use=107, 
In=107, 
Out=106, 
----------------------
 (3): 4 
def=100, 
use=106, 
In=106, 
Out=100, 
----------------------
 (4): 5 
def=108, 
use=100, 
In=100, 
Out=108, 100, 
----------------------
 (5): 6 
def=109, 
use=108, 
In=100, 108, 
Out=109, 100, 
----------------------
 (6): 7 
def=
use=109, 
In=100, 109, 
Out=100, 
----------------------
 (7): 8 
def=110, 
use=100, 
In=100, 
Out=110, 100, 
----------------------
 (8): 9 
def=
use=110, 
In=100, 110, 
Out=100, 
----------------------
 (9): 10 
def=111, 
use=100, 
In=100, 
Out=111, 100, 
----------------------
 (10): 11 
def=112, 
use=111, 
In=100, 111, 
Out=112, 100, 
----------------------
 (11): 12 
def=
use=112, 
In=100, 112, 
Out=100, 
----------------------
 (12): 13 
def=113, 
use=100, 
In=100, 
Out=113, 100, 
----------------------
 (13): 14 
def=114, 
use=113, 
In=100, 113, 
Out=114, 100, 
----------------------
 (14): 15 
def=
use=114, 
In=100, 114, 
Out=100, 
----------------------
 (15): 16 
def=115, 
use=100, 
In=100, 
Out=115, 100, 
----------------------
 (16): 17 
def=116, 
use=115, 
In=100, 115, 
Out=116, 100, 
----------------------
 (17): 18 
def=
use=116, 
In=100, 116, 
Out=100, 
----------------------
 (18): 19 
def=117, 
use=100, 
In=100, 
Out=117, 100, 
----------------------
 (19): 20 
def=118, 
use=117, 
In=100, 117, 
Out=118, 100, 
----------------------
 (20): 21 
def=
use=118, 
In=100, 118, 
Out=100, 
----------------------
 (21): 22 
def=119, 
use=100, 
In=100, 
Out=119, 100, 
----------------------
 (22): 23 
def=120, 
use=119, 
In=100, 119, 
Out=120, 100, 
----------------------
 (23): 24 
def=
use=120, 
In=100, 120, 
Out=100, 
----------------------
 (24): 25 
def=121, 
use=100, 
In=100, 
Out=121, 100, 
----------------------
 (25): 26 
def=122, 
use=121, 
In=100, 121, 
Out=122, 100, 
----------------------
 (26): 27 
def=
use=122, 
In=100, 122, 
Out=100, 
----------------------
 (27): 28 
def=123, 
use=100, 
In=100, 
Out=123, 100, 
----------------------
 (28): 29 
def=124, 
use=123, 
In=100, 123, 
Out=124, 100, 
----------------------
 (29): 30 
def=
use=124, 
In=100, 124, 
Out=100, 
----------------------
 (30): 31 
def=125, 
use=100, 
In=100, 
Out=125, 100, 
----------------------
 (31): 32 
def=126, 
use=125, 
In=100, 125, 
Out=126, 100, 
----------------------
 (32): 33 
def=
use=126, 
In=100, 126, 
Out=100, 
----------------------
 (33): 34 
def=127, 
use=100, 
In=100, 
Out=127, 100, 
----------------------
 (34): 35 
def=128, 
use=127, 
In=100, 127, 
Out=128, 100, 
----------------------
 (35): 36 
def=
use=128, 
In=100, 128, 
Out=100, 
----------------------
 (36): 37 
def=129, 
use=100, 
In=100, 
Out=129, 100, 
----------------------
 (37): 38 
def=130, 
use=129, 
In=100, 129, 
Out=130, 100, 
----------------------
 (38): 39 
def=
use=130, 
In=100, 130, 
Out=100, 
----------------------
 (39): 40 
def=101, 
use=
In=100, 
Out=100, 101, 
----------------------
 (40): 41 
def=131, 
use=
In=101, 100, 
Out=131, 101, 100, 
----------------------
 (41): 42 
def=103, 
use=131, 
In=100, 101, 131, 
Out=103, 100, 101, 
----------------------
 (42): 43 
def=132, 
use=103, 
In=101, 100, 103, 
Out=103, 101, 100, 132, 
----------------------
 (43): 44 
def=133, 
use=
In=132, 100, 101, 103, 
Out=132, 133, 100, 101, 103, 
----------------------
 (44): 45 
def=
use=133, 132, 
In=103, 101, 100, 133, 132, 
Out=103, 101, 100, 
----------------------
 (45): 46 
def=134, 
use=103, 
In=100, 101, 103, 
Out=103, 100, 101, 134, 
----------------------
 (46): 47 
def=135, 
use=
In=134, 101, 100, 103, 
Out=134, 135, 101, 100, 103, 
----------------------
 (47): 48 
def=
use=135, 134, 
In=103, 100, 101, 135, 134, 
Out=103, 100, 101, 
----------------------
 (48): 49 
def=136, 
use=103, 
In=101, 100, 103, 
Out=103, 101, 100, 136, 
----------------------
 (49): 50 
def=137, 
use=
In=136, 100, 101, 103, 
Out=136, 137, 100, 101, 103, 
----------------------
 (50): 51 
def=
use=137, 136, 
In=103, 101, 100, 137, 136, 
Out=103, 101, 100, 
----------------------
 (51): 52 
def=138, 
use=103, 
In=100, 101, 103, 
Out=103, 100, 101, 138, 
----------------------
 (52): 53 
def=139, 
use=
In=138, 101, 100, 103, 
Out=138, 139, 101, 100, 103, 
----------------------
 (53): 54 
def=
use=139, 138, 
In=103, 100, 101, 139, 138, 
Out=103, 100, 101, 
----------------------
 (54): 55 
def=102, 
use=103, 
In=101, 100, 103, 
Out=102, 101, 100, 
----------------------
 (55): 56 
def=141, 
use=102, 
In=100, 101, 102, 
Out=141, 102, 100, 101, 
----------------------
 (56): 57 
def=140, 
use=141, 
In=101, 100, 102, 141, 
Out=140, 101, 100, 102, 
----------------------
 (57): 58 
def=142, 
use=140, 
In=102, 100, 101, 140, 
Out=102, 142, 100, 101, 
----------------------
 (58): 59 
def=143, 
use=142, 102, 
In=101, 100, 142, 102, 
Out=101, 100, 102, 
----------------------
 (59): 60 
def=
use=
In=102, 100, 101, 
Out=102, 100, 101, 
----------------------
 (60): 61 
def=
use=
In=101, 100, 102, 
Out=101, 100, 102, 
----------------------
 (61): 62 
def=144, 
use=101, 
In=102, 100, 101, 
Out=144, 102, 101, 100, 
----------------------
 (62): 63 74 
def=
use=144, 
In=100, 101, 102, 144, 
Out=100, 101, 102, 
----------------------
 (63): 64 
def=
use=
In=102, 101, 100, 
Out=102, 101, 100, 
----------------------
 (64): 65 
def=
use=
In=100, 101, 102, 
Out=100, 101, 102, 
----------------------
 (65): 66 
def=
use=
In=102, 101, 100, 
Out=102, 101, 100, 
----------------------
 (66): 67 
def=146, 
use=102, 
In=100, 101, 102, 
Out=146, 102, 100, 101, 
----------------------
 (67): 68 
def=145, 
use=146, 
In=101, 100, 102, 146, 
Out=145, 101, 100, 102, 
----------------------
 (68): 69 
def=147, 
use=145, 
In=102, 100, 101, 145, 
Out=102, 147, 100, 101, 
----------------------
 (69): 70 
def=104, 
use=147, 102, 
In=101, 100, 147, 102, 
Out=104, 101, 100, 102, 
----------------------
 (70): 71 
def=148, 
use=104, 
In=102, 100, 101, 104, 
Out=148, 102, 100, 101, 
----------------------
 (71): 72 85 
def=
use=148, 
In=101, 100, 102, 148, 
Out=101, 100, 102, 
----------------------
 (72): 73 
def=
use=
In=102, 100, 101, 
Out=102, 100, 101, 
----------------------
 (73): 74 
def=
use=
In=101, 100, 102, 
Out=101, 100, 102, 
----------------------
 (74): 75 
def=
use=
In=102, 100, 101, 
Out=102, 100, 101, 
----------------------
 (75): 76 
def=150, 
use=102, 
In=101, 100, 102, 
Out=150, 101, 102, 100, 
----------------------
 (76): 77 
def=149, 
use=150, 
In=100, 102, 101, 150, 
Out=149, 100, 102, 101, 
----------------------
 (77): 78 
def=151, 
use=149, 
In=101, 102, 100, 149, 
Out=101, 102, 151, 100, 
----------------------
 (78): 79 
def=155, 
use=101, 
In=100, 151, 102, 101, 
Out=155, 100, 101, 151, 102, 
----------------------
 (79): 80 
def=154, 
use=100, 155, 
In=102, 151, 101, 100, 155, 
Out=154, 102, 151, 100, 101, 
----------------------
 (80): 81 
def=156, 
use=154, 
In=101, 100, 151, 102, 154, 
Out=156, 101, 100, 151, 102, 
----------------------
 (81): 82 
def=153, 
use=156, 
In=102, 151, 100, 101, 156, 
Out=153, 102, 151, 100, 101, 
----------------------
 (82): 83 
def=152, 
use=151, 102, 153, 
In=101, 100, 151, 102, 153, 
Out=101, 102, 100, 
----------------------
 (83): 84 
def=101, 
use=101, 
In=100, 102, 101, 
Out=101, 100, 102, 
----------------------
 (84): 60 
def=
use=
In=102, 100, 101, 
Out=102, 100, 101, 
----------------------
 (85): 86 
def=
use=
In=102, 101, 100, 
Out=102, 101, 100, 
----------------------
 (86): 87 
def=158, 
use=102, 
In=100, 101, 102, 
Out=158, 102, 100, 101, 
----------------------
 (87): 88 
def=157, 
use=158, 
In=101, 100, 102, 158, 
Out=157, 101, 100, 102, 
----------------------
 (88): 89 
def=159, 
use=157, 
In=102, 100, 101, 157, 
Out=102, 159, 100, 101, 
----------------------
 (89): 90 
def=105, 
use=159, 102, 
In=101, 100, 159, 102, 
Out=105, 102, 101, 100, 
----------------------
 (90): 91 
def=
use=105, 
In=100, 101, 102, 105, 
Out=100, 101, 102, 
----------------------
 (91): 92 
def=
use=
In=102, 101, 100, 
Out=102, 101, 100, 
----------------------
 (92): 65 
def=
use=
In=100, 101, 102, 
Out=100, 101, 102, 

------For function ----- s$pop

------Basic Block Graph---------
C13 (0): 
------~Final traced LLVM instructions ---------
define i64 @s$pop(i64 %r99) {
C13:
%r222 = add i64 %r99, 8
%r223 = inttoptr i64 %r222 to i64*
%r226 = add i64 %r99, 8
%r227 = inttoptr i64 %r226 to i64*
%r225 = load i64, i64* %r227, align 8
%r224 = sub i64 %r225, 1
store i64 %r224, i64* %r223, align 8
%r231 = add i64 %r99, 16
%r232 = inttoptr i64 %r231 to i64*
%r230 = load i64, i64* %r232, align 8
%r235 = add i64 %r99, 8
%r236 = inttoptr i64 %r235 to i64*
%r234 = load i64, i64* %r236, align 8
%r233 = mul i64 %r234, 8
%r229 = add i64 %r230, %r233
%r237 = inttoptr i64 %r229 to i64*
%r228 = load i64, i64* %r237, align 8
ret i64 %r228
}

------Flow Graph------
[        C13:; d: s: ]  (0): 1 
[%r222 = add i64 %r99, 8; d: 222; s: 99]  (1): 2 
[%r223 = inttoptr i64 %r222 to i64*; d: 223; s: 222]  (2): 3 
[%r226 = add i64 %r99, 8; d: 226; s: 99]  (3): 4 
[%r227 = inttoptr i64 %r226 to i64*; d: 227; s: 226]  (4): 5 
[%r225 = load i64, i64* %r227, align 8; d: 225; s: 227]  (5): 6 
[%r224 = sub i64 %r225, 1; d: 224; s: 225]  (6): 7 
[store i64 %r224, i64* %r223, align 8; d: s: 224, 223]  (7): 8 
[%r231 = add i64 %r99, 16; d: 231; s: 99]  (8): 9 
[%r232 = inttoptr i64 %r231 to i64*; d: 232; s: 231]  (9): 10 
[%r230 = load i64, i64* %r232, align 8; d: 230; s: 232]  (10): 11 
[%r235 = add i64 %r99, 8; d: 235; s: 99]  (11): 12 
[%r236 = inttoptr i64 %r235 to i64*; d: 236; s: 235]  (12): 13 
[%r234 = load i64, i64* %r236, align 8; d: 234; s: 236]  (13): 14 
[%r233 = mul i64 %r234, 8; d: 233; s: 234]  (14): 15 
[%r229 = add i64 %r230, %r233; d: 229; s: 230, 233]  (15): 16 
[%r237 = inttoptr i64 %r229 to i64*; d: 237; s: 229]  (16): 17 
[%r228 = load i64, i64* %r237, align 8; d: 228; s: 237]  (17): 18 
[ret i64 %r228; d: s: 228]  (18): 

/* ------Liveness Graph------*/
Number of iterations=76
----------------------
 (0): 1 
def=
use=
In=99, 
Out=99, 
----------------------
 (1): 2 
def=222, 
use=99, 
In=99, 
Out=222, 99, 
----------------------
 (2): 3 
def=223, 
use=222, 
In=99, 222, 
Out=99, 223, 
----------------------
 (3): 4 
def=226, 
use=99, 
In=223, 99, 
Out=226, 99, 223, 
----------------------
 (4): 5 
def=227, 
use=226, 
In=223, 99, 226, 
Out=227, 223, 99, 
----------------------
 (5): 6 
def=225, 
use=227, 
In=99, 223, 227, 
Out=225, 99, 223, 
----------------------
 (6): 7 
def=224, 
use=225, 
In=223, 99, 225, 
Out=223, 224, 99, 
----------------------
 (7): 8 
def=
use=224, 223, 
In=99, 224, 223, 
Out=99, 
----------------------
 (8): 9 
def=231, 
use=99, 
In=99, 
Out=231, 99, 
----------------------
 (9): 10 
def=232, 
use=231, 
In=99, 231, 
Out=232, 99, 
----------------------
 (10): 11 
def=230, 
use=232, 
In=99, 232, 
Out=99, 230, 
----------------------
 (11): 12 
def=235, 
use=99, 
In=230, 99, 
Out=235, 230, 
----------------------
 (12): 13 
def=236, 
use=235, 
In=230, 235, 
Out=236, 230, 
----------------------
 (13): 14 
def=234, 
use=236, 
In=230, 236, 
Out=234, 230, 
----------------------
 (14): 15 
def=233, 
use=234, 
In=230, 234, 
Out=233, 230, 
----------------------
 (15): 16 
def=229, 
use=230, 233, 
In=230, 233, 
Out=229, 
----------------------
 (16): 17 
def=237, 
use=229, 
In=229, 
Out=237, 
----------------------
 (17): 18 
def=228, 
use=237, 
In=237, 
Out=228, 
----------------------
 (18): 
def=
use=228, 
In=228, 
Out=

------For function ----- s$push

------Basic Block Graph---------
C16 (0): 
------~Final traced LLVM instructions ---------
define i64 @s$push(i64 %r99, i64 %r100) {
C16:
%r256 = add i64 %r99, 16
%r257 = inttoptr i64 %r256 to i64*
%r255 = load i64, i64* %r257, align 8
%r260 = add i64 %r99, 8
%r261 = inttoptr i64 %r260 to i64*
%r259 = load i64, i64* %r261, align 8
%r258 = mul i64 %r259, 8
%r254 = add i64 %r255, %r258
%r262 = inttoptr i64 %r254 to i64*
store i64 %r100, i64* %r262, align 8
%r263 = add i64 %r99, 8
%r264 = inttoptr i64 %r263 to i64*
%r267 = add i64 %r99, 8
%r268 = inttoptr i64 %r267 to i64*
%r266 = load i64, i64* %r268, align 8
%r265 = add i64 %r266, 1
store i64 %r265, i64* %r264, align 8
ret i64 1
}

------Flow Graph------
[        C16:; d: s: ]  (0): 1 
[%r256 = add i64 %r99, 16; d: 256; s: 99]  (1): 2 
[%r257 = inttoptr i64 %r256 to i64*; d: 257; s: 256]  (2): 3 
[%r255 = load i64, i64* %r257, align 8; d: 255; s: 257]  (3): 4 
[%r260 = add i64 %r99, 8; d: 260; s: 99]  (4): 5 
[%r261 = inttoptr i64 %r260 to i64*; d: 261; s: 260]  (5): 6 
[%r259 = load i64, i64* %r261, align 8; d: 259; s: 261]  (6): 7 
[%r258 = mul i64 %r259, 8; d: 258; s: 259]  (7): 8 
[%r254 = add i64 %r255, %r258; d: 254; s: 255, 258]  (8): 9 
[%r262 = inttoptr i64 %r254 to i64*; d: 262; s: 254]  (9): 10 
[store i64 %r100, i64* %r262, align 8; d: s: 100, 262]  (10): 11 
[%r263 = add i64 %r99, 8; d: 263; s: 99]  (11): 12 
[%r264 = inttoptr i64 %r263 to i64*; d: 264; s: 263]  (12): 13 
[%r267 = add i64 %r99, 8; d: 267; s: 99]  (13): 14 
[%r268 = inttoptr i64 %r267 to i64*; d: 268; s: 267]  (14): 15 
[%r266 = load i64, i64* %r268, align 8; d: 266; s: 268]  (15): 16 
[%r265 = add i64 %r266, 1; d: 265; s: 266]  (16): 17 
[store i64 %r265, i64* %r264, align 8; d: s: 265, 264]  (17): 18 
[   ret i64 1; d: s: ]  (18): 

/* ------Liveness Graph------*/
Number of iterations=98
----------------------
 (0): 1 
def=
use=
In=99, 100, 
Out=99, 100, 
----------------------
 (1): 2 
def=256, 
use=99, 
In=100, 99, 
Out=256, 99, 100, 
----------------------
 (2): 3 
def=257, 
use=256, 
In=100, 99, 256, 
Out=257, 100, 99, 
----------------------
 (3): 4 
def=255, 
use=257, 
In=99, 100, 257, 
Out=99, 255, 100, 
----------------------
 (4): 5 
def=260, 
use=99, 
In=100, 255, 99, 
Out=260, 99, 100, 255, 
----------------------
 (5): 6 
def=261, 
use=260, 
In=255, 100, 99, 260, 
Out=261, 255, 100, 99, 
----------------------
 (6): 7 
def=259, 
use=261, 
In=99, 100, 255, 261, 
Out=259, 99, 100, 255, 
----------------------
 (7): 8 
def=258, 
use=259, 
In=255, 100, 99, 259, 
Out=258, 255, 100, 99, 
----------------------
 (8): 9 
def=254, 
use=255, 258, 
In=99, 100, 255, 258, 
Out=254, 99, 100, 
----------------------
 (9): 10 
def=262, 
use=254, 
In=100, 99, 254, 
Out=262, 100, 99, 
----------------------
 (10): 11 
def=
use=100, 262, 
In=99, 100, 262, 
Out=99, 
----------------------
 (11): 12 
def=263, 
use=99, 
In=99, 
Out=263, 99, 
----------------------
 (12): 13 
def=264, 
use=263, 
In=99, 263, 
Out=99, 264, 
----------------------
 (13): 14 
def=267, 
use=99, 
In=264, 99, 
Out=267, 264, 
----------------------
 (14): 15 
def=268, 
use=267, 
In=264, 267, 
Out=268, 264, 
----------------------
 (15): 16 
def=266, 
use=268, 
In=264, 268, 
Out=266, 264, 
----------------------
 (16): 17 
def=265, 
use=266, 
In=264, 266, 
Out=264, 265, 
----------------------
 (17): 18 
def=
use=265, 264, 
In=265, 264, 
Out=
----------------------
 (18): 
def=
use=
In=
Out=

------For function ----- s$empty

------Basic Block Graph---------
C19 (0): 1 2 
L1 (1): 
L0 (2): 
------~Final traced LLVM instructions ---------
define i64 @s$empty(i64 %r99) {
C19:
%r286 = inttoptr i64 %r99 to i64*
%r285 = load i64, i64* %r286, align 8
%r288 = add i64 %r99, 8
%r289 = inttoptr i64 %r288 to i64*
%r287 = load i64, i64* %r289, align 8
%r284 = icmp eq i64 %r285, %r287
br i1 %r284, label %L0, label %L1
L1:
ret i64 0
L0:
ret i64 1
}

------Flow Graph------
[        C19:; d: s: ]  (0): 1 
[%r286 = inttoptr i64 %r99 to i64*; d: 286; s: 99]  (1): 2 
[%r285 = load i64, i64* %r286, align 8; d: 285; s: 286]  (2): 3 
[%r288 = add i64 %r99, 8; d: 288; s: 99]  (3): 4 
[%r289 = inttoptr i64 %r288 to i64*; d: 289; s: 288]  (4): 5 
[%r287 = load i64, i64* %r289, align 8; d: 287; s: 289]  (5): 6 
[%r284 = icmp eq i64 %r285, %r287; d: 284; s: 285, 287]  (6): 7 
[br i1 %r284, label %L0, label %L1; d: s: 284]  (7): 8 10 
[         L1:; d: s: ]  (8): 9 
[   ret i64 0; d: s: ]  (9): 10 
[         L0:; d: s: ]  (10): 11 
[   ret i64 1; d: s: ]  (11): 

/* ------Liveness Graph------*/
Number of iterations=107
----------------------
 (0): 1 
def=
use=
In=99, 
Out=99, 
----------------------
 (1): 2 
def=286, 
use=99, 
In=99, 
Out=286, 99, 
----------------------
 (2): 3 
def=285, 
use=286, 
In=99, 286, 
Out=99, 285, 
----------------------
 (3): 4 
def=288, 
use=99, 
In=285, 99, 
Out=288, 285, 
----------------------
 (4): 5 
def=289, 
use=288, 
In=285, 288, 
Out=289, 285, 
----------------------
 (5): 6 
def=287, 
use=289, 
In=285, 289, 
Out=287, 285, 
----------------------
 (6): 7 
def=284, 
use=285, 287, 
In=285, 287, 
Out=284, 
----------------------
 (7): 8 10 
def=
use=284, 
In=284, 
Out=
----------------------
 (8): 9 
def=
use=
In=
Out=
----------------------
 (9): 10 
def=
use=
In=
Out=
----------------------
 (10): 11 
def=
use=
In=
Out=
----------------------
 (11): 
def=
use=
In=
Out=

------For function ----- s$clear

------Basic Block Graph---------
C23 (0): 
------~Final traced LLVM instructions ---------
define i64 @s$clear(i64 %r99) {
C23:
%r297 = inttoptr i64 %r99 to i64*
store i64 0, i64* %r297, align 8
%r298 = add i64 %r99, 8
%r299 = inttoptr i64 %r298 to i64*
store i64 0, i64* %r299, align 8
%r296 = add i64 %r99, 16
%r300 = call i64* @malloc(i64 808)
%r100 = ptrtoint i64* %r300 to i64
%r301 = inttoptr i64 %r100 to i64*
store i64 100, i64* %r301, align 8
%r100 = add i64 %r100, 8
%r302 = inttoptr i64 %r296 to i64*
store i64 %r100, i64* %r302, align 8
ret i64 0
}

------Flow Graph------
[        C23:; d: s: ]  (0): 1 
[%r297 = inttoptr i64 %r99 to i64*; d: 297; s: 99]  (1): 2 
[store i64 0, i64* %r297, align 8; d: s: 297]  (2): 3 
[%r298 = add i64 %r99, 8; d: 298; s: 99]  (3): 4 
[%r299 = inttoptr i64 %r298 to i64*; d: 299; s: 298]  (4): 5 
[store i64 0, i64* %r299, align 8; d: s: 299]  (5): 6 
[%r296 = add i64 %r99, 16; d: 296; s: 99]  (6): 7 
[%r300 = call i64* @malloc(i64 808); d: 300; s: ]  (7): 8 
[%r100 = ptrtoint i64* %r300 to i64; d: 100; s: 300]  (8): 9 
[%r301 = inttoptr i64 %r100 to i64*; d: 301; s: 100]  (9): 10 
[store i64 100, i64* %r301, align 8; d: s: 301]  (10): 11 
[%r100 = add i64 %r100, 8; d: 100; s: 100]  (11): 12 
[%r302 = inttoptr i64 %r296 to i64*; d: 302; s: 296]  (12): 13 
[store i64 %r100, i64* %r302, align 8; d: s: 100, 302]  (13): 14 
[   ret i64 0; d: s: ]  (14): 

/* ------Liveness Graph------*/
Number of iterations=120
----------------------
 (0): 1 
def=
use=
In=99, 
Out=99, 
----------------------
 (1): 2 
def=297, 
use=99, 
In=99, 
Out=297, 99, 
----------------------
 (2): 3 
def=
use=297, 
In=99, 297, 
Out=99, 
----------------------
 (3): 4 
def=298, 
use=99, 
In=99, 
Out=298, 99, 
----------------------
 (4): 5 
def=299, 
use=298, 
In=99, 298, 
Out=299, 99, 
----------------------
 (5): 6 
def=
use=299, 
In=99, 299, 
Out=99, 
----------------------
 (6): 7 
def=296, 
use=99, 
In=99, 
Out=296, 
----------------------
 (7): 8 
def=300, 
use=
In=296, 
Out=300, 296, 
----------------------
 (8): 9 
def=100, 
use=300, 
In=296, 300, 
Out=100, 296, 
----------------------
 (9): 10 
def=301, 
use=100, 
In=296, 100, 
Out=301, 296, 100, 
----------------------
 (10): 11 
def=
use=301, 
In=100, 296, 301, 
Out=100, 296, 
----------------------
 (11): 12 
def=100, 
use=100, 
In=296, 100, 
Out=296, 100, 
----------------------
 (12): 13 
def=302, 
use=296, 
In=100, 296, 
Out=302, 100, 
----------------------
 (13): 14 
def=
use=100, 302, 
In=100, 302, 
Out=
----------------------
 (14): 
def=
use=
In=
Out=
