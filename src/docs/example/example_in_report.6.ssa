define i64 @main() {
C7:
%r175 = add i64 0, 0
%r176 = add i64 1, 0
%r177 = add i64 2, 0
%r178 = add i64 3, 0
%r179 = add i64 4, 0
%r180 = add i64 5, 0
%r181 = add i64 6, 0
%r182 = add i64 7, 0
%r183 = call i64* @malloc(i64 24)
%r184 = ptrtoint i64* %r183 to i64
%r185 = add i64 %r184, 8
%r186 = inttoptr i64 %r185 to i64*
%s187 = fadd double 1.000000, 0.0
store double %s187, i64* %r186, align 8
%r188 = inttoptr i64 %r184 to i64*
%r189 = add i64 0, 0
store i64 %r189, i64* %r188, align 8
%r190 = add i64 %r184, 16
%r191 = inttoptr i64 %r190 to i64*
%r192 = ptrtoint i64* @base$b to i64
store i64 %r192, i64* %r191, align 8
%r193 = add i64 %r184, 0
%r194 = call i64* @malloc(i64 32)
%r195 = ptrtoint i64* %r194 to i64
%r196 = inttoptr i64 %r195 to i64*
%r197 = add i64 0, 0
store i64 %r197, i64* %r196, align 8
%r198 = add i64 %r195, 8
%r199 = inttoptr i64 %r198 to i64*
%s200 = fadd double 1.000000, 0.0
store double %s200, i64* %r199, align 8
%r201 = call i64* @malloc(i64 32)
%r202 = ptrtoint i64* %r201 to i64
%r203 = add i64 %r202, 8
%r204 = sub i64 %r203, 8
%r205 = inttoptr i64 %r204 to i64*
%r206 = add i64 3, 0
store i64 %r206, i64* %r205, align 8
%r207 = inttoptr i64 %r203 to i64*
%r208 = add i64 1, 0
store i64 %r208, i64* %r207, align 8
%r209 = add i64 %r203, 8
%r210 = inttoptr i64 %r209 to i64*
%r211 = add i64 2, 0
store i64 %r211, i64* %r210, align 8
%r212 = add i64 %r203, 16
%r213 = inttoptr i64 %r212 to i64*
%r214 = add i64 3, 0
store i64 %r214, i64* %r213, align 8
%r215 = add i64 %r195, 24
%r216 = inttoptr i64 %r215 to i64*
store i64 %r203, i64* %r216, align 8
%r217 = add i64 %r195, 16
%r218 = inttoptr i64 %r217 to i64*
%r219 = ptrtoint i64* @derived$b to i64
store i64 %r219, i64* %r218, align 8
%r220 = add i64 %r195, 0
%r221 = inttoptr i64 %r193 to i64*
%r222 = load i64, i64* %r221, align 8
%r223 = inttoptr i64 %r220 to i64*
%r224 = load i64, i64* %r223, align 8
%r225 = icmp eq i64 %r222, %r224
br i1 %r225, label %L0, label %L1
L1:
call void @putint(i64 0)
br label %L2
L2:
call void @putch(i64 10)
br label %L3
L3:
%r226 = phi i64 [%r251, %L5], [%r175, %L2]
%r227 = add i64 %r220, 24
%r228 = inttoptr i64 %r227 to i64*
%r229 = load i64, i64* %r228, align 8
%r230 = sub i64 %r229, 8
%r231 = inttoptr i64 %r230 to i64*
%r232 = load i64, i64* %r231, align 8
%r233 = icmp slt i64 %r226, %r232
br i1 %r233, label %L5, label %L4
L4:
call void @putch(i64 10)
%r234 = add i64 %r193, 16
%r235 = inttoptr i64 %r234 to i64*
%r236 = load i64, i64* %r235, align 8
%r237 = inttoptr i64 %r236 to i64*
%r238 = call i64 %r237(i64 %r193)
call void @putint(i64 %r238)
call void @putch(i64 10)
%r239 = add i64 %r220, 16
%r240 = inttoptr i64 %r239 to i64*
%r241 = load i64, i64* %r240, align 8
%r242 = inttoptr i64 %r241 to i64*
%r243 = call i64 %r242(i64 %r220)
call void @putint(i64 %r243)
call void @putch(i64 10)
call void @putint(i64 %r176)
call void @putch(i64 10)
call void @putint(i64 %r177)
call void @putch(i64 10)
call void @putint(i64 %r178)
call void @putch(i64 10)
call void @putint(i64 %r179)
call void @putch(i64 10)
call void @putint(i64 %r180)
call void @putch(i64 10)
call void @putint(i64 %r181)
call void @putch(i64 10)
call void @putint(i64 %r182)
call void @putch(i64 10)
ret i64 0
L0:
call void @putint(i64 1)
br label %L2
L5:
%r244 = add i64 %r220, 24
%r245 = inttoptr i64 %r244 to i64*
%r246 = load i64, i64* %r245, align 8
%r247 = mul i64 %r226, 8
%r248 = add i64 %r246, %r247
%r249 = inttoptr i64 %r248 to i64*
%r250 = load i64, i64* %r249, align 8
call void @putint(i64 %r250)
call void @putint(i64 32)
%r251 = add i64 %r226, 1
br label %L3
}

define i64 @derived$b(i64 %r99) {
C10:
%r258 = add i64 %r99, 24
%r259 = inttoptr i64 %r258 to i64*
%r260 = load i64, i64* %r259, align 8
%r261 = add i64 %r260, 8
%r262 = inttoptr i64 %r261 to i64*
%r263 = load i64, i64* %r262, align 8
ret i64 %r263
}

define i64 @base$b(i64 %r99) {
C13:
ret i64 1
}

declare void @starttime()
declare void @stoptime()
declare i64* @malloc(i64)
declare void @putch(i64)
declare void @putint(i64)
declare void @putfloat(double)
declare i64 @getint()
declare float @getfloat()
declare i64* @getarray(i64)
declare i64 @getch(i64)
declare i64* @getfarray(i64)
declare void @putarray(i64, i64*)
declare void @putfarray(i64, i64*)
